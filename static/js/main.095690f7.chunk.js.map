{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.js","components/title/title.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monster","id","monsterSet","name","email","CardList","monsters","map","key","monsinjor","SearchBox","placeholder","handleChange","type","onChange","Title","App","state","searchField","monsterType","fetch","then","response","json","users","setState","style","background","margin","border","color","height","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","Button","variant","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"wVAGaA,G,YAAO,SAAAC,GAAK,OAErB,yBAAKC,UAAU,kBACX,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,mBAAqDL,EAAMM,WAA3D,mBACtB,4BAAKN,EAAMI,QAAQG,MACnB,2BAAIP,EAAMI,QAAQI,UCHbC,G,MAAW,SAAAT,GAAK,OACzB,yBAAKC,UAAY,aAETD,EAAMU,SAASC,KAAI,SAAAP,GAAO,OAC1B,kBAAC,EAAD,CAAMQ,IAAKR,EAAQC,GAAID,QAASA,EAASE,WAAYN,EAAMa,kBCN1DC,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,2BACIC,KAAK,SACLhB,UAAW,SACXc,YAAaA,EACbG,SAAWF,M,MCMJG,MAXf,WACI,OAEI,yBAAKlB,UAAU,cACX,0BAAMA,UAAU,gBAAhB,eACA,wCACA,0BAAMA,UAAU,gBAAhB,W,QC2DGmB,E,kDA5Db,WAAYpB,GAAQ,IAAD,8BACjB,cAAMA,IACDqB,MAAQ,CACXX,SAAU,GACVY,YAAa,GACbC,YAAa,GALE,E,gEAQE,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAAEnB,SAAUkB,S,+BAGnC,IAAD,SACDE,GAAK,GACTC,WAAY,oDACZC,OAAQ,WACRC,OAAQ,EACRC,MAAO,UACPC,OAAQ,IALC,uBAMD,IANC,wBAOA,UAPA,GADJ,EAWwCC,KAAKf,MAA5CX,EAXD,EAWCA,SAAUY,EAXX,EAWWA,YAAaC,EAXxB,EAWwBA,YAKzBc,EAAmB3B,EAAS4B,QAAO,SAAAlC,GAAO,OAC9CA,EAAQG,KAAKgC,cAAcC,SAASlB,EAAYiB,kBAGlD,OACE,yBAAKtC,UAAU,OAEb,kBAAC,EAAD,MACA,kBAAC,EAAD,CACEc,YAAY,aACZC,aAAc,SAAAyB,GAAC,OAAI,EAAKZ,SAAS,CAAEP,YAAamB,EAAEC,OAAOC,WACzD,6BACF,kBAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYX,MAAM,UAAUJ,MAAOA,EACjDgB,QAAS,kBAAM,EAAKjB,SAAS,CAAEN,YAAa,MAD9C,UAIA,kBAACqB,EAAA,EAAD,CAAQC,QAAQ,YAAYX,MAAM,UAAUJ,MAAOA,EACjDgB,QAAS,kBAAM,EAAKjB,SAAS,CAAEN,YAAa,MAD9C,YAIA,kBAACqB,EAAA,EAAD,CAAQC,QAAQ,YAAYX,MAAM,UAAUJ,MAAOA,EACjDgB,QAAS,kBAAM,EAAKjB,SAAS,CAAEN,YAAaA,EAAc,MAD5D,WAIA,kBAAC,EAAD,CAAUb,SAAU2B,EAAkBxB,UAAWU,S,GAvDvCwB,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAS,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H7C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.095690f7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './card.styles.css'\r\n\r\nexport const Card = props =>(\r\n    \r\n    <div className='card-container'>\r\n        <img alt='monster' src={`https://robohash.org/${props.monster.id}?set=set${props.monsterSet}&size=180x180`}/>\r\n        <h2>{props.monster.name}</h2>\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n)","import React from 'react';\r\nimport {Card} from '../card/card.component';\r\nimport './card-list.styles.css';\r\n\r\n\r\nexport const CardList = props => (\r\n    <div className = 'card-list'>\r\n        {\r\n            props.monsters.map(monster => (\r\n            <Card key={monster.id} monster={monster} monsterSet={props.monsinjor}/>\r\n        ))}\r\n    </div>\r\n);","import React from \"react\";\r\nimport './search-box.styles.css'\r\n\r\nexport const SearchBox = ({placeholder, handleChange }) => (\r\n    <input \r\n        type='search' \r\n        className ='search' \r\n        placeholder={placeholder} \r\n        onChange={ handleChange}/>\r\n)","import React from 'react'\r\nimport './title-style.css'\r\n\r\nfunction Title() {\r\n    return (\r\n\r\n        <div className=\"robotsFont\">\r\n            <span className=\"monstersFont\">Monsters & </span>\r\n            <span>Robots</span>\r\n            <span className=\"monstersFont\"> inc.</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Title\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport { SearchBox } from './components/search-box/search-box.component';\nimport Title from './components/title/title';\nimport Button from '@material-ui/core/Button';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      monsters: [],\n      searchField: '',\n      monsterType: 1\n    };\n  }\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({ monsters: users }));\n  }\n\n  render() {\n    const style = {\n      background: 'linear-gradient(180deg, #f5f5f0 30%, #999966 70%)',\n      margin: '20px 6px',\n      border: 0,\n      color: '#4d4d33',\n      height: 30,\n      height: 48,\n      padding: '0 30px',\n    };\n    //Destructuring \n    const { monsters, searchField, monsterType } = this.state;\n    // to je isto kao\n    /*const monsters = this.state.monsters;\n    const searchField = this.state.searchField;\n    */\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase()));\n\n\n    return (\n      <div className=\"App\">\n        \n        <Title />\n        <SearchBox\n          placeholder='Search ...'\n          handleChange={e => this.setState({ searchField: e.target.value })}\n        /><br></br>\n        <Button variant=\"contained\" color=\"primary\" style={style}\n          onClick={() => this.setState({ monsterType: 1 })}>\n          Robots\n        </Button>\n        <Button variant=\"contained\" color=\"primary\" style={style}\n          onClick={() => this.setState({ monsterType: 2 })}>\n          Monsters\n        </Button>\n        <Button variant=\"contained\" color=\"primary\" style={style}\n          onClick={() => this.setState({ monsterType: monsterType + 1 })}>\n          Explore\n        </Button>\n        <CardList monsters={filteredMonsters} monsinjor={monsterType} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n//render (What, WHERE);\nReactDOM.render(  <App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}